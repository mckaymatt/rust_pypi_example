# Based on the "trust" template v0.1.1
# https://github.com/japaric/trust/tree/v0.1.1
dist: trusty
language: rust
services: docker
sudo: required
# Config file for automatic testing at travis-ci.org
# This file will be regenerated if you run travis_pypi_setup.py

env:
  global:
    # TODO Update this to match the name of your project.
    - CRATE_NAME=trust_pypi_example
    # Rust release. E.g. Stable, nightly, nightly-2014-12-18
    - RUSTRELEASE=stable

matrix:
  include:
    # TARGET is the rust target triplet
    # WHEELPLATFORM is the wheel platform target
    # PYENV is the Python version to build against. Not relevent if using "manylinux"


    # Linux
    # we are using Rustup instead of cross when WHEELPLATFORM="*manylinux*". This is because both
    # manylinux and Cross depend on Docker but the shared libs in the Cross contains are too new
    # to make valid manylinux containers.
    #
    # You can lean more about the differnt Rustup toolchains here:
    # https://github.com/rust-lang-nursery/rustup.rs#toolchain-specification
    #
    # More on manylinuyx at https://github.com/pypa/manylinux
    # and the pep https://www.python.org/dev/peps/pep-0513
    #
    # one other thing about manylinux. Since the container contains several versions of python,
    # we build/test against all of them at the same time. I have it set up to run against
    # cp27-cp27m, cp27-cp27mu, cp33-cp33m, cp34-cp34m, cp35-cp35m, cp36-cp36m
    # PYENV versions isn't relevent here so just keep it at 3.6.1
    - env: TARGET=i686-unknown-linux-gnu PYENV=3.6.1 WHEELPLATFORM=manylinux1_i686
    - env: TARGET=x86_64-unknown-linux-gnu PYENV=3.6.1 WHEELPLATFORM=manylinux1_x86_64

    #  Note that musl isn't covered by manylinux and I had trouble building
    #  dylibs with it as well
    # - env: TARGET=i686-unknown-linux-musl PYENV=2.7.13 WHEELPLATFORM=
    # - env: TARGET=i686-unknown-linux-musl PYENV=3.6.1 WHEELPLATFORM=
    # - env: TARGET=x86_64-unknown-linux-musl PYENV=2.7.13 WHEELPLATFORM=
    # - env: TARGET=x86_64-unknown-linux-musl PYENV=3.6.1 WHEELPLATFORM=

    # OSX
    # See versions https://docs.travis-ci.com/user/osx-ci-environment/#OS-X-Version
    # current default is osx_image: xcode7.3 OS X 10.11
    #
    - env: TARGET=x86_64-apple-darwin PYENV=2.7.13 WHEELPLATFORM=macosx_10_11_x86_64
      os: osx
      osx_image: xcode7.3
    - env: TARGET=x86_64-apple-darwin PYENV=3.6.1 WHEELPLATFORM=macosx_10_10_x86_64
      os: osx
      osx_image: xcode6.4
    # - env: TARGET=i686-apple-darwin PYENV=2.7.13 WHEELPLATFORM=
    #   os: osx
    # - env: TARGET=i686-apple-darwin PYENV=3.6.1 WHEELPLATFORM=
    #   os: osx

    # # *BSD
    # - env: TARGET=i686-unknown-freebsd DISABLE_TESTS=1 WHEELPLATFORM=
    # - env: TARGET=x86_64-unknown-freebsd DISABLE_TESTS=1 WHEELPLATFORM=
    # - env: TARGET=x86_64-unknown-netbsd DISABLE_TESTS=1 WHEELPLATFORM=

    # # Other architectures
    # - env: TARGET=aarch64-unknown-linux-gnu WHEELPLATFORM=
    # - env: TARGET=armv7-unknown-linux-gnueabihf WHEELPLATFORM=
    # - env: TARGET=mips-unknown-linux-gnu WHEELPLATFORM=
    # - env: TARGET=mips64-unknown-linux-gnuabi64 WHEELPLATFORM=
    # - env: TARGET=mips64el-unknown-linux-gnuabi64 WHEELPLATFORM=
    # - env: TARGET=mipsel-unknown-linux-gnu WHEELPLATFORM=
    # - env: TARGET=powerpc-unknown-linux-gnu WHEELPLATFORM=
    # - env: TARGET=powerpc64-unknown-linux-gnu WHEELPLATFORM=
    # - env: TARGET=powerpc64le-unknown-linux-gnu WHEELPLATFORM=
    # - env: TARGET=s390x-unknown-linux-gnu DISABLE_TESTS=1 WHEELPLATFORM=

    # # Testing other channels
    # - env: TARGET=x86_64-unknown-linux-gnu WHEELPLATFORM=
    #   rust: nightly
    # - env: TARGET=x86_64-apple-darwin WHEELPLATFORM=
    #   os: osx
    #   rust: nightly


before_install: set -e

install:
  - bash ci/pyinstall.sh
  - bash ci/install.sh
  - source ~/.cargo/env || true

script:
  - bash ci/script.sh

after_script: set +e

before_deploy:
  - sh ci/before_deploy.sh

deploy:
# After you create the Github repo and add it to Travis, run the
# travis_pypi_setup.py script to finish PyPI deployment setup
 - provider: pypi
   distributions: bdist_wheel
   user: mckaymatt
   password:
     secure: gw5UUxAkCTOWQCcRqavrsjPNxGHDqZr1tej0Y6GzKq6DMDxcvAH36lHdP596eRUfIs20ZZcaUz9+y1DBL8cFleghLBMKHnjH9AMx5p5SMRxItkuERRE5zCsAASEf7W5z5bzR9PWoUsLXbQdR9eTaWn2JYHU00MC5RmPfH8+NAItP2xCjTX/JFqg/pXPHc0uKz5ijwDaFASF/+1zDaqHrU4SdS47o/17jQsmMOwYUMn4htfHWYFnB6dktrTlPeiCFV1qA4HntnVnm6Bls2J7THPkyZmHE1GnGTLhKhqlL/IUAHdRzQuPvcEpWwsgmwjgWbz8ccBdDVOh4n4KBRGxM+NlY0H3VZICRCI/r8aT/3M7FX5tQp5s1Cl8IDD7SHRcu6EsJKjubmntX/7/GFrMvEiIx342bA8ohFklAeZftlnaf9JSdZqvAj0NKi7K96B7BfajGEhFkd02GlC0/2uQGlZI4MajDcYd2cHB/qUvIKbRVXzkV1nFiwHD3g6PGCvFYYK+F+PCacPiz17ANuETaQgGJ6WpRV+zwTAlmmAWaAcUBdBkYkUamaQNtjIXvZCqqe0P0AX38bYJG+qXsLRL+TceZ3P0Pn8iaBkgn7VmRLq1jMio5zf6eIHQU6BENXsI1+3an2O1nLgB1TfatukMyIoORezWfQliTrkLnaP1Pmz8=
   on:
     tags: true
     repo: mckaymatt/trust_pypi_example
     # condition: $TOXENV == py27
 - provider: releases
   # TODO update `api_key.secure`
   # - Create a `public_repo` GitHub token. Go to: https://github.com/settings/tokens/new
   # - Encrypt it: `travis encrypt 0123456789012345678901234567890123456789
   # - Paste the output down here
   api_key:
     secure: "K4ttQbVILc4kq90ZiHOydhIwm09zHxfwUMnxwnBGMkAFdRL8oSjfXNd0O1Q/OA5XUVaFkp9Uluc6oy3AywOyjsLLu9xRm1qpgxMIak0nKGVQ8fzMrFILcTU3mXsOFX6VEfLqIR0bbmV31p//0Ytn6lH5PdOPe8Jm9AGHSIlrv0+Adzn01CZGgTZFi55p4hrzlP7zQhPliJFhtVd8dYga65t4aubEK7ZVQ030Z1pida/IaMyWQwbD63h1DrmyFBdnTl1gnk0fluWCeVnXQHgld0/P4QKZCPnPcVpn1eOdhju7L9r8Tc+AVirvv5jkCLFBtFDAinTkv2LUu8RsSKgD5Jzg8oYVXdebCpeXQ7f+3JoqyunF8NncHc4dszylNRGuJeMpFy5QTYqPkPDNQczMY9GMbsshzlDp8rKPGMPXpwwh+EeiKijm77eVZJ4UqSmoAt9yLe+Dq8I7ZB1GPUHBaVAlesWvCJ9FfzvDXbD0Piv85Wb0BCAOLuYouCtPeSaD69DeS+Y1rzEt5tSwWx3s8uTV7WPEVlROjlW2TB1ELIUQBETCw/yqEkfVm25XrQSpVlzaHxfh7RuEVyi5/Aj/q/yjeHeJYU+qN53FWWNKazeZJUeqwyDwx3Cjx09ACzKEfcmvcZiwv2mGZxhHqM3VARWvvpDDVcOmh9vQhErZzic="
   file_glob: true
   file: wheelhouse/trust_pypi_example*.whl
   # file: $CRATE_NAME-$TRAVIS_TAG-$TARGET.*
   on:
     # TODO Here you can pick which targets will generate binary releases
     # In this example, there are some targets that are tested using the stable
     # and nightly channels. This condition makes sure there is only one release
     # for such targets and that's generated using the stable channel
     condition: $TRAVIS_RUST_VERSION = stable
     tags: true
   skip_cleanup: true

before_cache:
  # Travis can't cache files that are not readable by "others"
  - chmod -R a+r $HOME/.cache/pip
  - chmod -R a+r $HOME/.cache/pyenv
  - chmod -R a+r $HOME/.cargo
  - chmod -R a+r $HOME/.rustup
  - chmod -R a+r $HOME/.manylinux_pip_cache
  - chmod -R a+r $HOME/.manylinux_rustup_cache
  - chmod -R a+r $HOME/.manylinux_cargo_cache


cache:
  # There is a "cache: cargo" option but it's fails if target/ isn't in the build dir
  directories:
    - $HOME/.cache/pip
    - $HOME/.cache/pyenv
    - $HOME/.cargo
    - $HOME/.rustup
    - $HOME/.manylinux_pip_cache
    - $HOME/.manylinux_rustup_cache
    - $HOME/.manylinux_cargo_cache


branches:
  only:
    # release tags
    - /^v\d+\.\d+\.\d+.*$/
    - master

notifications:
  email:
    recipients:
      - mckaymatt@gmail.com
    on_success: never
    on_failure: never # default: always
